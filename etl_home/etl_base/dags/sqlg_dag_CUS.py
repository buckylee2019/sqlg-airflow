
# -*- coding: utf-8 -*-
# Author        : Jesse Wei
# LastUpdate    : 2020/11/04
# Impact        : DAG generated by SQLG
# Message       : Humanity towards others, we live by sharing. Fear can hold you prisoner, only hope can set you free.

# from __future__ import print_function
import logging
import re
import airflow
from datetime import datetime, timedelta
from airflow.operators.sensors import ExternalTaskSensor
from airflow.operators.python_operator import PythonOperator
from airflow import models
from airflow.models import Variable
#from acme.operators.dwh_operators import PostgresOperatorWithTemplatedParams

# XSLT:loop: declaration: START{
import sqlg_jobs_CUS


args = {
    "owner": "JESSEWEI",
    'start_date': airflow.utils.dates.days_ago(1),
    'provide_context': True
}	
# XSLT:loop: declaration: END}

ExternalTaskSensor.ui_color = 'white'
ExternalTaskSensor.ui_fgcolor = 'blue'

tmpl_search_path = Variable.get("sql_path")
	

# XSLT:loop: JOB_FLOW_NAME: START{
job_flow_name = "D_ODS_CUS_SRC"
if job_flow_name == 'I_SDM_CMN':
    data_stage = ['ODS']
else:
    data_stage = re.findall(r"_(.*?)_","D_ODS_CUS_SRC")
D_ODS_CUS_SRC = airflow.DAG(
    "D_ODS_CUS_SRC",
    tags=["CUS", data_stage[0]],
    schedule_interval="@daily",
    dagrun_timeout=timedelta(minutes=60),
    template_searchpath=tmpl_search_path,
    default_args=args,
    start_date=airflow.utils.dates.days_ago(1),    
    max_active_runs=1
	)
job_flow_name = "D_SDM_CUS"
if job_flow_name == 'I_SDM_CMN':
    data_stage = ['ODS']
else:
    data_stage = re.findall(r"_(.*?)_","D_SDM_CUS")
D_SDM_CUS = airflow.DAG(
    "D_SDM_CUS",
    tags=["CUS", data_stage[0]],
    schedule_interval="@daily",
    dagrun_timeout=timedelta(minutes=60),
    template_searchpath=tmpl_search_path,
    default_args=args,
    start_date=airflow.utils.dates.days_ago(1),    
    max_active_runs=1
	)
job_flow_name = "M_SDM_CUS"
if job_flow_name == 'I_SDM_CMN':
    data_stage = ['ODS']
else:
    data_stage = re.findall(r"_(.*?)_","M_SDM_CUS")
M_SDM_CUS = airflow.DAG(
    "M_SDM_CUS",
    tags=["CUS", data_stage[0]],
    schedule_interval="@monthly",
    dagrun_timeout=timedelta(minutes=60),
    template_searchpath=tmpl_search_path,
    default_args=args,
    start_date=airflow.utils.dates.days_ago(1),    
    max_active_runs=1
	)

# XSLT:loop: JOB_FLOW_NAME: END}

# 	XSLT:loop: JOB_FLOW_NAME-and-PRE_JOB: External:START{{

my_taskid = "D_ODS_CUS_SRCxD_STG_INIT__SYS_STS_STG"
D_ODS_CUS_SRCxD_STG_INIT__SYS_STS_STG= ExternalTaskSensor(
#    schedule_interval=None,
    pool = "sensor_pool",
    task_id=my_taskid,
    external_dag_id="D_STG_INIT",
    external_task_id="SYS_STS_STG",
    mode="reschedule",
    dag=D_ODS_CUS_SRC,
    check_existence=True,
#    execution_delta=None,  # Same day as today
)

my_taskid = "D_SDM_CUSxD_STG_INIT__SYS_STS_STG"
D_SDM_CUSxD_STG_INIT__SYS_STS_STG= ExternalTaskSensor(
#    schedule_interval=None,
    pool = "sensor_pool",
    task_id=my_taskid,
    external_dag_id="D_STG_INIT",
    external_task_id="SYS_STS_STG",
    mode="reschedule",
    dag=D_SDM_CUS,
    check_existence=True,
#    execution_delta=None,  # Same day as today
)

my_taskid = "M_SDM_CUSxD_STG_INIT__SYS_STS_STG"
M_SDM_CUSxD_STG_INIT__SYS_STS_STG= ExternalTaskSensor(
#    schedule_interval=None,
    pool = "sensor_pool",
    task_id=my_taskid,
    external_dag_id="D_STG_INIT",
    external_task_id="SYS_STS_STG",
    mode="reschedule",
    dag=M_SDM_CUS,
    check_existence=True,
#    execution_delta=None,  # Same day as today
)
	
# 	XSLT:loop: JOB_FLOW_NAME-and-PRE_JOB: External: END}}


# XSLT:loop: JOB_FLOW_NAME: START{


# 	XSLT:loop: Rows-by-JOB_FLOW_NAME: JOB_NAME: START{{
sqlg_jobs_CUS.HZ_CUST_ACCOUNTS.dag=D_ODS_CUS_SRC
D_ODS_CUS_SRCxD_STG_INIT__SYS_STS_STG.set_downstream(sqlg_jobs_CUS.HZ_CUST_ACCOUNTS)
sqlg_jobs_CUS.HZ_PARTIES.dag=D_ODS_CUS_SRC
D_ODS_CUS_SRCxD_STG_INIT__SYS_STS_STG.set_downstream(sqlg_jobs_CUS.HZ_PARTIES)


# 	XSLT:loop: Rows-by-JOB_FLOW_NAME: JOB_NAME: START{{
sqlg_jobs_CUS.SDM_CUSTOMER.dag=D_SDM_CUS
D_SDM_CUSxD_STG_INIT__SYS_STS_STG.set_downstream(sqlg_jobs_CUS.SDM_CUSTOMER)
sqlg_jobs_CUS.SDM_PREMIUM_FREIGHT.dag=D_SDM_CUS
D_SDM_CUSxD_STG_INIT__SYS_STS_STG.set_downstream(sqlg_jobs_CUS.SDM_PREMIUM_FREIGHT)


# 	XSLT:loop: Rows-by-JOB_FLOW_NAME: JOB_NAME: START{{
sqlg_jobs_CUS.SDM_MARKET_TAM_CAGR.dag=M_SDM_CUS
M_SDM_CUSxD_STG_INIT__SYS_STS_STG.set_downstream(sqlg_jobs_CUS.SDM_MARKET_TAM_CAGR)
sqlg_jobs_CUS.SDM_MEETING_MINUTES.dag=M_SDM_CUS
M_SDM_CUSxD_STG_INIT__SYS_STS_STG.set_downstream(sqlg_jobs_CUS.SDM_MEETING_MINUTES)
sqlg_jobs_CUS.REF_PRODUCT_TECHNOLOGY.dag=M_SDM_CUS
M_SDM_CUSxD_STG_INIT__SYS_STS_STG.set_downstream(sqlg_jobs_CUS.REF_PRODUCT_TECHNOLOGY)
